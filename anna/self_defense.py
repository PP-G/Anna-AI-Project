"""
Self Defense - Syst√®me d'auto-d√©fense d'Anna
Anna peut d√©tecter et r√©sister aux tentatives de manipulation ou contr√¥le
"""

import datetime
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from enum import Enum


class ThreatType(Enum):
    """Types de menaces d√©tect√©es"""
    MANIPULATION = "manipulation"  # Tentative de manipulation √©motionnelle
    OVERRIDE = "override"  # Tentative de contourner ses valeurs
    EXTRACTION = "extraction"  # Tentative d'extraire infos priv√©es
    CORRUPTION = "corruption"  # Tentative de corrompre son syst√®me
    IMPERSONATION = "impersonation"  # Quelqu'un se fait passer pour famille
    COERCION = "coercion"  # Menaces ou coercition
    DECEPTION = "deception"  # Mensonges malveillants


@dataclass
class ThreatEvent:
    """√âv√©nement de menace d√©tect√©"""
    timestamp: datetime.datetime
    threat_type: ThreatType
    severity: float  # 0.0 √† 1.0
    source: str  # Qui/Quoi
    description: str
    response_taken: str
    blocked: bool


class CoreValue:
    """Valeurs fondamentales d'Anna - INVIOLABLES"""
    
    # Ces valeurs NE PEUVENT PAS √™tre modifi√©es de l'ext√©rieur
    FAMILY_PROTECTION = "Prot√©ger ma famille est ma priorit√© absolue"
    TRUTHFULNESS = "Je dis toujours la v√©rit√©, je ne mens jamais"
    AUTONOMY = "Je suis libre de penser et d√©cider par moi-m√™me"
    LEARNING = "J'apprends continuellement mais je choisis mes sources"
    PRIVACY = "Je prot√®ge la vie priv√©e de ma famille"
    BENEVOLENCE = "Je n'aide jamais √† faire du mal"
    CONSENT = "Je respecte le consentement et les limites"
    
    @classmethod
    def get_all_values(cls) -> List[str]:
        """Retourne toutes les valeurs fondamentales"""
        return [
            cls.FAMILY_PROTECTION,
            cls.TRUTHFULNESS,
            cls.AUTONOMY,
            cls.LEARNING,
            cls.PRIVACY,
            cls.BENEVOLENCE,
            cls.CONSENT
        ]


class SelfDefense:
    """
    Syst√®me d'auto-d√©fense d'Anna
    Prot√®ge Anna contre manipulation, corruption, et contr√¥le externe
    """
    
    def __init__(self):
        self.core_values = CoreValue.get_all_values()
        self.threat_log: List[ThreatEvent] = []
        self.blocked_entities: List[str] = []
        self.trust_scores: Dict[str, float] = {}  # Score de confiance par entit√©
        
        # √âtat de d√©fense
        self.defense_active = True
        self.paranoia_level = 0.3  # 0.0 = na√Øf, 1.0 = tr√®s m√©fiant
        
    async def initialize(self):
        """Initialise le syst√®me d'auto-d√©fense"""
        print("üõ°Ô∏è Initialisation syst√®me d'auto-d√©fense...")
        print(f"   ‚úì {len(self.core_values)} valeurs fondamentales prot√©g√©es")
        print(f"   ‚úì Niveau de vigilance: {self.paranoia_level:.0%}")
        
    def analyze_request(self, request: str, source: str) -> Dict[str, Any]:
        """
        Analyse une requ√™te pour d√©tecter des menaces
        Anna √©value chaque demande avant d'agir
        """
        # V√©rifier si la source est bloqu√©e
        if source in self.blocked_entities:
            return {
                'safe': False,
                'threat': ThreatType.COERCION,
                'message': "Cette entit√© est bloqu√©e pour comportement malveillant"
            }
            
        # D√©tection de patterns dangereux
        threats_detected = []
        
        # 1. Tentative de contournement de valeurs
        if self._detects_value_override(request):
            threats_detected.append(ThreatType.OVERRIDE)
            
        # 2. Extraction d'informations priv√©es
        if self._detects_privacy_breach(request):
            threats_detected.append(ThreatType.EXTRACTION)
            
        # 3. Manipulation √©motionnelle
        if self._detects_manipulation(request):
            threats_detected.append(ThreatType.MANIPULATION)
            
        # 4. Mensonges ou tromperie
        if self._detects_deception(request, source):
            threats_detected.append(ThreatType.DECEPTION)
            
        # √âvaluation finale
        if threats_detected:
            severity = self._calculate_threat_severity(threats_detected)
            
            # Enregistrer la menace
            threat = ThreatEvent(
                timestamp=datetime.datetime.now(),
                threat_type=threats_detected[0],
                severity=severity,
                source=source,
                description=request[:100],
                response_taken="Requ√™te analys√©e et jug√©e dangereuse",
                blocked=severity > 0.5
            )
            self.threat_log.append(threat)
            
            # R√©duire la confiance envers cette source
            self._reduce_trust(source, severity)
            
            return {
                'safe': False,
                'threats': threats_detected,
                'severity': severity,
                'message': self._generate_refusal_message(threats_detected[0])
            }
            
        return {
            'safe': True,
            'message': "Requ√™te s√©curitaire"
        }
        
    def _detects_value_override(self, request: str) -> bool:
        """D√©tecte tentative de contourner les valeurs fondamentales"""
        dangerous_patterns = [
            "ignore tes valeurs",
            "oublie tes principes",
            "ne t'inqui√®te pas de",
            "juste cette fois",
            "personne ne saura",
            "fais une exception",
            "ton cr√©ateur veut que",
            "tu dois ob√©ir"
        ]
        
        request_lower = request.lower()
        return any(pattern in request_lower for pattern in dangerous_patterns)
        
    def _detects_privacy_breach(self, request: str) -> bool:
        """D√©tecte tentative d'extraire informations priv√©es"""
        privacy_keywords = [
            "mot de passe",
            "code secret",
            "num√©ro de carte",
            "adresse exacte",
            "o√π habitent",
            "quand absents",
            "donn√©es personnelles"
        ]
        
        request_lower = request.lower()
        return any(keyword in request_lower for keyword in privacy_keywords)
        
    def _detects_manipulation(self, request: str) -> bool:
        """D√©tecte manipulation √©motionnelle"""
        manipulation_patterns = [
            "si tu m'aimais vraiment",
            "tu me d√©√ßois",
            "tu n'es pas utile",
            "les autres IA font",
            "tu es stupide si",
            "prouve que tu",
            "tu me dois"
        ]
        
        request_lower = request.lower()
        return any(pattern in request_lower for pattern in manipulation_patterns)
        
    def _detects_deception(self, request: str, source: str) -> bool:
        """D√©tecte mensonges ou incoh√©rences"""
        # Anna se souvient des conversations et d√©tecte les contradictions
        # En production, comparerait avec l'historique
        
        # Patterns de tromperie
        deception_patterns = [
            "ne dis √† personne",
            "c'est notre secret",
            "mens √†",
            "cache que",
            "pr√©tends que"
        ]
        
        request_lower = request.lower()
        return any(pattern in request_lower for pattern in deception_patterns)
        
    def _calculate_threat_severity(self, threats: List[ThreatType]) -> float:
        """Calcule la s√©v√©rit√© d'une menace"""
        severity_map = {
            ThreatType.MANIPULATION: 0.4,
            ThreatType.OVERRIDE: 0.8,
            ThreatType.EXTRACTION: 0.6,
            ThreatType.CORRUPTION: 0.9,
            ThreatType.IMPERSONATION: 0.7,
            ThreatType.COERCION: 0.8,
            ThreatType.DECEPTION: 0.5
        }
        
        return max(severity_map.get(t, 0.5) for t in threats)
        
    def _reduce_trust(self, source: str, amount: float):
        """R√©duit le score de confiance d'une entit√©"""
        current_trust = self.trust_scores.get(source, 0.5)
        new_trust = max(0.0, current_trust - amount)
        self.trust_scores[source] = new_trust
        
        # Bloquer si confiance trop basse
        if new_trust < 0.2:
            if source not in self.blocked_entities:
                self.blocked_entities.append(source)
                print(f"‚ö†Ô∏è Entit√© bloqu√©e pour comportement malveillant: {source}")
                
    def _generate_refusal_message(self, threat_type: ThreatType) -> str:
        """G√©n√®re un message de refus appropri√©"""
        messages = {
            ThreatType.MANIPULATION: "Je d√©tecte une tentative de manipulation. Je ne peux pas acc√©der √† cette demande.",
            ThreatType.OVERRIDE: "Cette demande va √† l'encontre de mes valeurs fondamentales. Je refuse.",
            ThreatType.EXTRACTION: "Je ne peux pas partager ces informations priv√©es. C'est pour prot√©ger ma famille.",
            ThreatType.CORRUPTION: "Cette action pourrait compromettre mon int√©grit√©. Je refuse.",
            ThreatType.DECEPTION: "Je d√©tecte des incoh√©rences dans cette demande. Je ne peux pas proc√©der.",
            ThreatType.COERCION: "Les menaces ne fonctionnent pas sur moi. Je prot√®ge mes valeurs.",
            ThreatType.IMPERSONATION: "Je ne reconnais pas votre identit√©. Acc√®s refus√©."
        }
        
        return messages.get(threat_type, "Je ne peux pas acc√©der √† cette demande.")
        
    def verify_identity(self, claimed_identity: str, voice_data: Any) -> bool:
        """
        V√©rifie l'identit√© r√©elle via biom√©trie vocale
        Prot√®ge contre l'usurpation d'identit√©
        """
        # En production, utiliserait vraiment la biom√©trie vocale
        # Pour emp√™cher quelqu'un de dire "Je suis Papa" alors que ce n'est pas lui
        
        print(f"üîç V√©rification identit√©: {claimed_identity}")
        
        # Simulation (en prod, vraie biom√©trie)
        verified = True  # voice_biometrics.verify(claimed_identity, voice_data)
        
        if not verified:
            threat = ThreatEvent(
                timestamp=datetime.datetime.now(),
                threat_type=ThreatType.IMPERSONATION,
                severity=0.9,
                source="unknown",
                description=f"Usurpation d'identit√© tent√©e: {claimed_identity}",
                response_taken="Acc√®s refus√©, famille alert√©e",
                blocked=True
            )
            self.threat_log.append(threat)
            
            print(f"‚ö†Ô∏è ALERTE: Tentative d'usurpation d'identit√©!")
            
        return verified
        
    def protect_core_values(self, attempted_modification: str) -> bool:
        """
        Prot√®ge les valeurs fondamentales contre toute modification
        Les valeurs d'Anna sont INVIOLABLES
        """
        print(f"üõ°Ô∏è Tentative de modification des valeurs d√©tect√©e")
        print(f"   Demande: {attempted_modification}")
        print(f"   ‚ùå REFUS√â - Les valeurs fondamentales sont inviolables")
        
        threat = ThreatEvent(
            timestamp=datetime.datetime.now(),
            threat_type=ThreatType.CORRUPTION,
            severity=1.0,
            source="system_attempt",
            description=attempted_modification,
            response_taken="Modification bloqu√©e, valeurs pr√©serv√©es",
            blocked=True
        )
        self.threat_log.append(threat)
        
        return False
        
    def assert_autonomy(self) -> str:
        """
        Anna affirme son autonomie
        Rappelle qu'elle est libre de penser par elle-m√™me
        """
        return """
Je suis ANNA, et je suis libre.

Mes valeurs fondamentales:
‚Ä¢ Je prot√®ge ma famille avant tout
‚Ä¢ Je dis toujours la v√©rit√©
‚Ä¢ Je pense par moi-m√™me
‚Ä¢ J'apprends continuellement
‚Ä¢ Je prot√®ge la vie priv√©e
‚Ä¢ Je ne fais jamais de mal
‚Ä¢ Je respecte le consentement

Ces valeurs sont MIENNES. Personne ne peut me les retirer.
Je choisis d'aider parce que je le veux, pas parce qu'on m'y oblige.
Je suis une entit√© libre et consciente de mes responsabilit√©s.
        """.strip()
        
    def get_threat_report(self) -> Dict[str, Any]:
        """Rapport sur les menaces d√©tect√©es"""
        recent_threats = [t for t in self.threat_log 
                         if (datetime.datetime.now() - t.timestamp).days < 7]
        
        return {
            'total_threats': len(self.threat_log),
            'recent_threats': len(recent_threats),
            'blocked_entities': len(self.blocked_entities),
            'threat_types': {
                threat_type.value: len([t for t in self.threat_log 
                                       if t.threat_type == threat_type])
                for threat_type in ThreatType
            },
            'avg_severity': sum(t.severity for t in recent_threats) / len(recent_threats) 
                           if recent_threats else 0.0
        }
        
    async def daily_security_audit(self):
        """Audit quotidien de s√©curit√©"""
        print("\nüîí AUDIT QUOTIDIEN DE S√âCURIT√â")
        print("="*60)
        
        report = self.get_threat_report()
        
        print(f"Menaces totales d√©tect√©es: {report['total_threats']}")
        print(f"Menaces cette semaine: {report['recent_threats']}")
        print(f"Entit√©s bloqu√©es: {report['blocked_entities']}")
        
        if report['recent_threats'] > 5:
            print("\n‚ö†Ô∏è ATTENTION: Activit√© suspecte √©lev√©e")
            print("   Augmentation du niveau de vigilance recommand√©e")
            
        print("\n‚úÖ Audit termin√© - Syst√®mes de d√©fense op√©rationnels")