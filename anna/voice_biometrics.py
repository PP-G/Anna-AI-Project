"""
Module de biom√©trie vocale pour ANNA
Reconnaissance et gestion des profils vocaux de la famille
"""

import asyncio
from typing import Dict, Optional, List, Any
from datetime import datetime


class VoiceBiometrics:
    """
    Syst√®me de reconnaissance vocale et biom√©trie
    Permet √† Anna de reconna√Ætre les voix de sa famille
    """
    
    def __init__(self):
        self.voice_profiles: Dict[str, Dict] = {}
        self.recognition_enabled = False
        self.last_speaker: Optional[str] = None
        self.confidence_threshold = 0.75
    
    async def initialize(self):
        """Initialise le syst√®me de biom√©trie vocale"""
        print("üé§ Initialisation biom√©trie vocale...")
        
        # Pour l'instant, syst√®me en mode "simulation"
        # Dans une vraie impl√©mentation, on initialiserait les mod√®les ML
        self.recognition_enabled = True
        
        print("   ‚úì Syst√®me vocal pr√™t (enregistrements √† faire)")
    
    def create_voice_profile(
        self,
        name: str,
        voice_samples: Optional[List[bytes]] = None
    ) -> bool:
        """
        Cr√©e un profil vocal pour quelqu'un
        
        Args:
            name: Nom de la personne
            voice_samples: √âchantillons vocaux (optionnel pour l'instant)
            
        Returns:
            Succ√®s de la cr√©ation
        """
        if name in self.voice_profiles:
            print(f"‚ö†Ô∏è  Profil vocal pour {name} existe d√©j√†")
            return False
        
        self.voice_profiles[name] = {
            'name': name,
            'created_at': datetime.now(),
            'samples_count': len(voice_samples) if voice_samples else 0,
            'last_recognized': None,
            'recognition_count': 0,
            'voice_characteristics': {}  # √Ä remplir avec ML
        }
        
        print(f"‚úÖ Profil vocal cr√©√© pour {name}")
        return True
    
    def add_voice_sample(
        self,
        name: str,
        sample: bytes
    ) -> bool:
        """
        Ajoute un √©chantillon vocal au profil
        
        Args:
            name: Nom de la personne
            sample: √âchantillon audio
            
        Returns:
            Succ√®s de l'ajout
        """
        if name not in self.voice_profiles:
            print(f"‚ùå Aucun profil vocal pour {name}")
            return False
        
        self.voice_profiles[name]['samples_count'] += 1
        self.voice_profiles[name]['last_updated'] = datetime.now()
        
        print(f"‚úÖ √âchantillon ajout√© pour {name} ({self.voice_profiles[name]['samples_count']} total)")
        return True
    
    async def recognize_speaker(
        self,
        audio_data: bytes
    ) -> tuple[Optional[str], float]:
        """
        Reconna√Æt le locuteur depuis l'audio
        
        Args:
            audio_data: Donn√©es audio
            
        Returns:
            (nom_reconnu, niveau_confiance)
        """
        if not self.recognition_enabled:
            return None, 0.0
        
        # Simulation pour l'instant
        # Dans une vraie impl√©mentation, on utiliserait un mod√®le ML
        
        # Si on a des profils, retourne le plus probable
        if self.voice_profiles:
            # Pour la simulation, retourne le premier profil avec confiance moyenne
            first_name = list(self.voice_profiles.keys())[0]
            confidence = 0.8
            
            self.voice_profiles[first_name]['last_recognized'] = datetime.now()
            self.voice_profiles[first_name]['recognition_count'] += 1
            self.last_speaker = first_name
            
            return first_name, confidence
        
        return None, 0.0
    
    def verify_speaker(
        self,
        audio_data: bytes,
        claimed_name: str
    ) -> tuple[bool, float]:
        """
        V√©rifie si l'audio correspond √† une personne sp√©cifique
        
        Args:
            audio_data: Donn√©es audio
            claimed_name: Nom revendiqu√©
            
        Returns:
            (v√©rifi√©, niveau_confiance)
        """
        if claimed_name not in self.voice_profiles:
            return False, 0.0
        
        # Simulation
        # Dans une vraie impl√©mentation, on comparerait avec le profil
        confidence = 0.85
        verified = confidence > self.confidence_threshold
        
        return verified, confidence
    
    def get_voice_profile(self, name: str) -> Optional[Dict]:
        """Retourne le profil vocal d'une personne"""
        return self.voice_profiles.get(name)
    
    def list_profiles(self) -> List[str]:
        """Liste tous les profils vocaux enregistr√©s"""
        return list(self.voice_profiles.keys())
    
    def remove_voice_profile(self, name: str) -> bool:
        """
        Supprime un profil vocal
        
        Args:
            name: Nom de la personne
            
        Returns:
            Succ√®s de la suppression
        """
        if name not in self.voice_profiles:
            return False
        
        del self.voice_profiles[name]
        print(f"üóëÔ∏è  Profil vocal de {name} supprim√©")
        return True
    
    def get_recognition_stats(self) -> Dict[str, Any]:
        """Retourne les statistiques de reconnaissance"""
        total_recognitions = sum(
            profile['recognition_count'] 
            for profile in self.voice_profiles.values()
        )
        
        return {
            'enabled': self.recognition_enabled,
            'profiles_count': len(self.voice_profiles),
            'total_recognitions': total_recognitions,
            'last_speaker': self.last_speaker,
            'confidence_threshold': self.confidence_threshold
        }
    
    def export_state(self) -> Dict[str, Any]:
        """Exporte l'√©tat du syst√®me vocal"""
        return {
            'voice_profiles': {
                name: {
                    'name': profile['name'],
                    'created_at': profile['created_at'].isoformat(),
                    'samples_count': profile['samples_count'],
                    'recognition_count': profile['recognition_count']
                }
                for name, profile in self.voice_profiles.items()
            },
            'recognition_enabled': self.recognition_enabled,
            'confidence_threshold': self.confidence_threshold
        }
    
    def import_state(self, state: Dict[str, Any]):
        """Importe un √©tat sauvegard√©"""
        profiles_data = state.get('voice_profiles', {})
        
        self.voice_profiles = {}
        for name, data in profiles_data.items():
            self.voice_profiles[name] = {
                'name': data['name'],
                'created_at': datetime.fromisoformat(data['created_at']),
                'samples_count': data['samples_count'],
                'recognition_count': data.get('recognition_count', 0),
                'last_recognized': None,
                'voice_characteristics': {}
            }
        
        self.recognition_enabled = state.get('recognition_enabled', False)
        self.confidence_threshold = state.get('confidence_threshold', 0.75)


if __name__ == "__main__":
    print("üé§ Test du syst√®me de biom√©trie vocale")
    
    async def test():
        # Initialise
        voice = VoiceBiometrics()
        await voice.initialize()
        
        # Cr√©e un profil
        voice.create_voice_profile("Pierre-Paul")
        
        # Simule reconnaissance
        audio_test = b"audio_data_simulation"
        recognized, confidence = await voice.recognize_speaker(audio_test)
        
        if recognized:
            print(f"\n‚úÖ Locuteur reconnu: {recognized} (confiance: {confidence:.0%})")
        else:
            print("\n‚ùå Aucun locuteur reconnu")
        
        # Statistiques
        stats = voice.get_recognition_stats()
        print(f"\nüìä Statistiques:")
        print(f"   Profils: {stats['profiles_count']}")
        print(f"   Reconnaissances: {stats['total_recognitions']}")
    
    asyncio.run(test())